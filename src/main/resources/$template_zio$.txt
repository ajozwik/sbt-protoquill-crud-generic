__PACKAGE__

import io.getquill.*
import io.getquill.context.qzio.ZioJdbcContext
import io.getquill.context.sql.idiom.SqlIdiom
__BEAN_CLASS_IMPORT__
__ID_CLASS_IMPORT__
import pl.jozwik.quillgeneric.zio.ZioJdbcRepository
import pl.jozwik.quillgeneric.zio.ZioJdbcRepository.*
import zio.interop.catz.*

final class __BEAN__RepositoryJdbc[+D <: SqlIdiom, +N <: NamingStrategy, C <: ZioJdbcContextWithDataQuotes[D, N]](
    protected val context: C,
    protected val meta: SchemaMeta[__BEAN__]
) extends __BEAN__RepositoryQuill[D, N, C]

trait __BEAN__RepositoryQuill[+D <: SqlIdiom, +N <: NamingStrategy, C <: ZioJdbcContextWithDataQuotes[D, N]]
  extends __REPOSITORY_TRAIT_SIMPLE_NAME__[__ID__, __BEAN__, C, D, N] {

  protected val context: C

  import context.*

  protected def meta: SchemaMeta[__BEAN__]

  implicit val m: SchemaMeta[__BEAN__] = meta

  protected def quoteQuery = quote {
    query[__BEAN__]
  }

  protected inline def find(id: __ID__): Quoted[EntityQuery[__BEAN__]] = quote {
    quoteQuery.filter(_.id == lift(id))
  }

  override def all: QIO[Seq[__BEAN__]] =
    run(quoteQuery)

  override def create(entity: __BEAN__): QIO[__ID__] =
    for {
      _ <- run(quoteQuery.insertValue(lift(entity)))
    } yield {
      entity.id
    }

  override def createOrUpdate(entity: __BEAN__): QIO[__ID__] =
    context.transaction {
      for {
        el <- run(find(entity.id).updateValue(lift(entity)))
        id <- el match
          case 0 =>
            create(entity)
          case _ =>
            pure(entity.id)
      } yield {
        id
      }
    }

  override def read(id: __ID__): QIO[Option[__BEAN__]] =
    for {
      seq <- run(find(id))
    } yield {
      seq.headOption
    }

  override def update(entity: __BEAN__): QIO[Long] =
    run(find(entity.id).updateValue(lift(entity)))

  override def delete(id: __ID__): QIO[Long] =
    run(find(id).delete)

  override def deleteAll(): QIO[Long] =
    run(quoteQuery.delete)

}
